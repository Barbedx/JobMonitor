// <auto-generated />
using System;
using AspCoreAngular.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspCoreAngular.Migrations
{
    [DbContext(typeof(SqlJobMonitorContext))]
    [Migration("20190227143257_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobMonitor.BLL.Model.Job", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnName("guid");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Frequency")
                        .HasColumnName("frequency")
                        .HasMaxLength(100);

                    b.Property<bool>("IsRunning")
                        .HasColumnName("isRunning");

                    b.Property<bool>("IsScheduled")
                        .HasColumnName("isScheduled");

                    b.Property<string>("JobCategory")
                        .HasColumnName("jobCategory")
                        .HasMaxLength(200);

                    b.Property<bool>("JobEnabled")
                        .HasColumnName("jobEnabled");

                    b.Property<string>("JobOwner")
                        .HasColumnName("jobOwner")
                        .HasMaxLength(200);

                    b.Property<string>("LastOutcomeMessage")
                        .HasColumnName("lastOutcomeMessage");

                    b.Property<string>("LastRunCommand")
                        .IsRequired()
                        .HasColumnName("lastRunCommand");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnName("lastRunDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastRunDuration")
                        .HasColumnName("LastRunDuration");

                    b.Property<int?>("LastRunOutcome")
                        .HasColumnName("lastRunOutcome");

                    b.Property<string>("LastRunStepMessage")
                        .IsRequired()
                        .HasColumnName("lastRunStepMessage");

                    b.Property<string>("LastRunStepName")
                        .IsRequired()
                        .HasColumnName("lastRunStepName")
                        .HasMaxLength(200);

                    b.Property<int?>("LastRunStepNumber")
                        .HasColumnName("lastRunStepNumber");

                    b.Property<long?>("MaxDuration")
                        .HasColumnName("MaxDuration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("NextRunDate")
                        .HasColumnName("nextRunDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfSteps")
                        .HasColumnName("numberOfSteps");

                    b.Property<string>("Recurrence")
                        .HasColumnName("recurrence")
                        .HasMaxLength(100);

                    b.Property<string>("SheduleName")
                        .HasColumnName("sheduleName")
                        .HasMaxLength(200);

                    b.Property<string>("SqlServerPath")
                        .IsRequired()
                        .HasColumnName("sqlServerPath")
                        .HasMaxLength(200);

                    b.Property<string>("SubdayFrequency")
                        .HasColumnName("subdayFrequency")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Guid")
                        .HasName("PK__tblJobs__497F6CB4915B0B62");

                    b.HasIndex("SqlServerPath");

                    b.ToTable("tblJobs");
                });

            modelBuilder.Entity("JobMonitor.BLL.Model.SqlServer", b =>
                {
                    b.Property<string>("SqlServerPath")
                        .HasColumnName("sqlServerPath")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsEnabled")
                        .HasColumnName("isEnabled");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SqlServerPath");

                    b.ToTable("tblServers");
                });

            modelBuilder.Entity("JobMonitor.BLL.Model.Job", b =>
                {
                    b.HasOne("JobMonitor.BLL.Model.SqlServer", "SqlServer")
                        .WithMany("Jobs")
                        .HasForeignKey("SqlServerPath")
                        .HasConstraintName("FK_tblJobs_tblServers");
                });
#pragma warning restore 612, 618
        }
    }
}
