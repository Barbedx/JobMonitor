// <auto-generated />
using System;
using AspCoreAngular.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspCoreAngular.Migrations
{
    [DbContext(typeof(SqlJobMonitorContext))]
    [Migration("20190227185833_add social links migration")]
    partial class addsociallinksmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AspCoreAngular.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FacebookId");

                    b.Property<int?>("GoogleID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "092ea858-51c8-487b-a0bc-7364f95b9be1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5d9b3a2-ec29-45d9-bc87-3a5cf702e4ef",
                            Email = "my@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05b6fb72-253f-43e8-9dcc-49ce2a2894db",
                            TwoFactorEnabled = false,
                            UserName = "myname"
                        });
                });

            modelBuilder.Entity("JobMonitor.BLL.Model.Job", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnName("guid");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Frequency")
                        .HasColumnName("frequency")
                        .HasMaxLength(100);

                    b.Property<bool>("IsRunning")
                        .HasColumnName("isRunning");

                    b.Property<bool>("IsScheduled")
                        .HasColumnName("isScheduled");

                    b.Property<string>("JobCategory")
                        .HasColumnName("jobCategory")
                        .HasMaxLength(200);

                    b.Property<bool>("JobEnabled")
                        .HasColumnName("jobEnabled");

                    b.Property<string>("JobOwner")
                        .HasColumnName("jobOwner")
                        .HasMaxLength(200);

                    b.Property<string>("LastOutcomeMessage")
                        .HasColumnName("lastOutcomeMessage");

                    b.Property<string>("LastRunCommand")
                        .IsRequired()
                        .HasColumnName("lastRunCommand");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnName("lastRunDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastRunDuration")
                        .HasColumnName("LastRunDuration");

                    b.Property<int?>("LastRunOutcome")
                        .HasColumnName("lastRunOutcome");

                    b.Property<string>("LastRunStepMessage")
                        .IsRequired()
                        .HasColumnName("lastRunStepMessage");

                    b.Property<string>("LastRunStepName")
                        .IsRequired()
                        .HasColumnName("lastRunStepName")
                        .HasMaxLength(200);

                    b.Property<int?>("LastRunStepNumber")
                        .HasColumnName("lastRunStepNumber");

                    b.Property<long?>("MaxDuration")
                        .HasColumnName("MaxDuration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("NextRunDate")
                        .HasColumnName("nextRunDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfSteps")
                        .HasColumnName("numberOfSteps");

                    b.Property<string>("Recurrence")
                        .HasColumnName("recurrence")
                        .HasMaxLength(100);

                    b.Property<string>("SheduleName")
                        .HasColumnName("sheduleName")
                        .HasMaxLength(200);

                    b.Property<string>("SqlServerPath")
                        .IsRequired()
                        .HasColumnName("sqlServerPath")
                        .HasMaxLength(200);

                    b.Property<string>("SubdayFrequency")
                        .HasColumnName("subdayFrequency")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Guid")
                        .HasName("PK__tblJobs__497F6CB4915B0B62");

                    b.HasIndex("SqlServerPath");

                    b.ToTable("tblJobs");
                });

            modelBuilder.Entity("JobMonitor.BLL.Model.SqlServer", b =>
                {
                    b.Property<string>("SqlServerPath")
                        .HasColumnName("sqlServerPath")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsEnabled")
                        .HasColumnName("isEnabled");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SqlServerPath");

                    b.ToTable("tblServers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0b2bd70b-6159-42d9-a179-7b27d6fc4ac0",
                            ConcurrencyStamp = "7279be47-97b8-4894-8cff-8d839b8a5db1",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "d0a89b7c-1bcc-4769-bb58-f4e8219eb594",
                            ConcurrencyStamp = "20b2eef8-f354-480b-b1d2-caa2db6308eb",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobMonitor.BLL.Model.Job", b =>
                {
                    b.HasOne("JobMonitor.BLL.Model.SqlServer", "SqlServer")
                        .WithMany("Jobs")
                        .HasForeignKey("SqlServerPath")
                        .HasConstraintName("FK_tblJobs_tblServers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AspCoreAngular.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AspCoreAngular.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspCoreAngular.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AspCoreAngular.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
